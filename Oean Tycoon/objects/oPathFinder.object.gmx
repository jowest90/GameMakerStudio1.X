<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Ship2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if(mouse_check_button_pressed(mb_any)){
    var path=aStarGetPath(obj_start.x,obj_start.y,obj_end.x,obj_end.y);
    path_start(path,5,0,true);
}
*/
var path=aStarGetPath(obj_start.x,obj_start.y,obj_end.x,obj_end.y);
    path_start(path,5,0,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
//draw path elements
if(path_get_number(path_index)&gt;=2){
    //draw path
    draw_set_color(c_blue);
    for(var i=0;i&lt;path_get_number(path_index)-1;i++){
        draw_line(
            path_get_point_x(path_index,i)+.5*oAStar.blockSize,
            path_get_point_y(path_index,i)+.5*oAStar.blockSize,
            path_get_point_x(path_index,i+1)+.5*oAStar.blockSize,
            path_get_point_y(path_index,i+1)+.5*oAStar.blockSize
        );
    }
    //draw starting and ending point
    draw_set_color(c_green);
    draw_circle(path_get_point_x(path_index,0)+.5*oAStar.blockSize,
        path_get_point_y(path_index,0)+.5*oAStar.blockSize,5,false);
    draw_set_color(c_red);
    draw_circle(path_get_point_x(path_index,path_get_number(path_index)-1)+.5*oAStar.blockSize,
        path_get_point_y(path_index,path_get_number(path_index)-1)+.5*oAStar.blockSize,5,false);
}
*/
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
